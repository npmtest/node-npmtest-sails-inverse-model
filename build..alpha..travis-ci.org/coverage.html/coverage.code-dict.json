{"/home/travis/build/npmtest/node-npmtest-sails-inverse-model/test.js":"/* istanbul instrument in package npmtest_sails_inverse_model */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/lib.npmtest_sails_inverse_model.js":"/* istanbul instrument in package npmtest_sails_inverse_model */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sails_inverse_model = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sails_inverse_model = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sails-inverse-model && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sails_inverse_model */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sails_inverse_model\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sails_inverse_model.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sails_inverse_model.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sails_inverse_model.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sails_inverse_model.__dirname + '/lib.npmtest_sails_inverse_model.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/index.js":"var compiler_my = require('./generator/mysql/compiler_mysql');\nvar compiler_pg = require('./generator/postgres/compiler_pg');\nvar compiler_mg = require('./generator/mongodb/compiler_mongo');\n\n/**\n * [generatepg generate mvc from PostgreSQL]\n * @param  {[json]} config               [config database PostgreSQL; user, password, host, database, schema, port]\n * @param  {[string]} folder_models      [dir folder models]\n * @param  {[string]} folder_controllers [dir folder controllers]\n * @param  {[string]} folder_views       [dir folder views]\n * @return {[void]}                    [none]\n */\nexports.generatepg = function (config, folder_models, folder_controllers, folder_views) {\n  compiler_pg.generate(config, folder_models, folder_controllers, folder_views);\n};\n\n/**\n * [generatemy generate mvc from MySQL]\n * @param  {[json]} config             \t[config database MySQL; user, password, host, database, port]\n * @param  {[string]} folder_models      \t\t[dir folder models]\n * @param  {[string]} folder_controllers \t\t[dir folder controllers]\n * @param  {[string]} folder_views \t\t\t\t\t[dir folder views]\n * @return {[void]}                    \t\t\t[none]\n */\nexports.generatemy = function (config, folder_models, folder_controllers, folder_views) {\n  compiler_my.generate(config, folder_models, folder_controllers, folder_views);\n};\n\n/**\n * [generatemg MongoDB]\n * @param  {[string]} host               [description]\n * @param  {[number]} port               [description]\n * @param  {[string]} database           [description]\n * @param  {[string]} folder_views       [description]\n * @param  {[string]} folder_models      [description]\n * @param  {[string]} folder_controllers [description]\n * @return {[none]}                    [description]\n */\nexports.generatemg = function (host, port, database, folder_views, folder_models, folder_controllers) {\n  compiler_mg.generate(host, port, database, folder_views, folder_models, folder_controllers);\n};","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/generator/mysql/compiler_mysql.js":"/**\n * compiler_mysql.js\n * 2016\n *\n * Process mysql to models waterline\n */\nvar mysqldesc = require('mysqldesc');\nvar s = require(\"underscore.string\");\n\nvar to = require('../../configs/to');\nvar view = require('../../genviews/view');\nvar async = require(\"async\");\n\nrequire('../save');\nrequire('../../configs/color');\n\nvar FK_IDENTIFIER = \"id\";\n\nexports.generate = function(config, folder_models, folder_controllers, folder_views) {\n  // Describe connected database\n  mysqldesc(config, function(err, data) {\n    if (err) {\n      console.log(\"ERROR: \", err);\n    } else {\n      var Models = [],\n        count = 1;\n\n      async.forEachOf(data, function(value, table, callback) {\n        if (data.hasOwnProperty(table)) {\n          console.log(color(\"[\" + (count++) + \" Generating]\", \"blue\") + \" \" + table + \" table ...\");\n\n          var attributes_sails = [],\n            view_contents = [];\n          mysqldesc.keyColumnUsage(config, config.database, table, function(err, data2) {\n            for (var colum in data[table]) {\n              //console.log(table + \"=>\" + colum);\n              var reference_fk = undefined;\n              if (data2[colum] && data2[colum][\"REFERENCED_TABLE_NAME\"]) {\n                reference_fk = {\n                  table: data2[colum].REFERENCED_TABLE_NAME,\n                  column: data2[colum].REFERENCED_COLUMN_NAME\n                };\n                //console.log(table + \"=>\" + JSON.stringify(data2[colum], null, 4));\n              }\n              var attributes = data[table][colum];\n              //console.log(attributes);\n              var result = transpile(attributes, colum, reference_fk);\n              view_contents.push(result.view_content);\n              attributes_sails.push(result.model_content);\n            }\n            //console.log(\"-------------\");\n            Models.push({\n              model_name: s.camelize(table).trim(),\n              content: \"attributes: { \" + attributes_sails + \" }\",\n              view_content: view_contents\n            });\n            //console.log(table + \" = \" + JSON.stringify(table, null, 4));\n            callback(null, table);\n          });\n        }\n      }, function(err) {\n        console.log([Models.length, \"tables\"].join(\" \"));\n\n        //console.log(Models);\n        if (folder_views !== \"\" && folder_views) {\n          view.generate(Models, folder_views);\n        }\n        if (folder_models !== \"\" && folder_models) {\n          saveModels(folder_models, Models);\n        }\n        if (folder_controllers !== \"\" && folder_controllers) {\n          saveControllers(folder_controllers, Models);\n        }\n      });\n    }\n  });\n};\n\n/**\n * [transpile: convert all attributes mysql to orm sailsjs]\n * @param  {[type]} attributes     \t[description]\n * @param  {[type]} name_attribute \t[description]\n * @param  {[type]} reference_fk \t  [description]\n * @return {[type]}                \t[description]\n */\nfunction transpile(attributes, name_attribute, reference_fk) {\n  //console.log(\"attributes \" + JSON.stringify(attributes, null, 4));\n  var type_ = attributes[\"Type\"];\n  var default_value_ = attributes[\"Default\"];\n  var is_nullable_ = attributes[\"Null\"];\n  var key_ = attributes[\"Key\"];\n\n  //console.log(JSON.stringify(attributes));\n  return exports.toSailsAttribute(type_, name_attribute, default_value_, is_nullable_, key_, reference_fk);\n}\n\nexports.toSailsAttribute = function(Type, attrib, default_value_, is_nullable_, key_, reference_fk) {\n  var content_view = {\n    required: false,\n    default_value: default_value_,\n    name: attrib,\n    type: undefined\n  };\n\n  //console.log(attrib);\n  var attribute = [];\n\n  Type = Type.toLowerCase();\n\n  if (Type.indexOf('varchar') > -1 ||\n    Type.indexOf('time') > -1) {\n    attribute.push(getString(Type));\n    content_view.type = \"text\";\n  } else if (Type.indexOf('int') > -1 ||\n    Type.indexOf('small') > -1) { //Include smallint\n    attribute.push(getInteger(Type));\n    content_view.type = \"number\";\n  } else if (Type.indexOf('bool') > -1 ||\n    Type.indexOf('bit') > -1) {\n    attribute.push(getBoolean());\n    content_view.type = \"checkbox\";\n  } else if (Type.indexOf('float') > -1 ||\n    Type.indexOf('dec') > -1 || //Include decimal\n    Type.indexOf('numeric') > -1 ||\n    Type.indexOf('real') > -1 ||\n    Type.indexOf('precicion') > -1) {\n    attribute.push(getFloat());\n    content_view.type = \"number\";\n  } else if (Type.indexOf('enum') > -1) {\n    attribute.push(getEnum(Type));\n    content_view.type = \"text\";\n  } else if (Type.indexOf('text') > -1) {\n    attribute.push(getText());\n    content_view.type = \"text\";\n  } else if (Type.indexOf('datetime') > -1) {\n    attribute.push(getDateTime());\n    content_view.type = \"datetime\";\n  } else if (Type.indexOf('date') > -1 ||\n    Type.indexOf('year') > -1) {\n    attribute.push(getDate());\n    content_view.type = \"date\";\n  }\n  if (key_ === \"PRI\") {\n    attribute.push(getPK());\n    content_view.required = true;\n  } else if (key_ === \"MUL\") {\n    if (reference_fk) {\n      attrib = attrib.replace(FK_IDENTIFIER, \"\");\n      //attrib = reference_fk.table;\n      //attribute.push('model: ' + reference_fk.table);\n      attribute = ['model: \"' + reference_fk.table + '\"'];\n    }\n  } else if (key_ === \"UNI\") {\n    attribute.push(getUnique());\n  }\n  if (is_nullable_ === \"NO\") {\n    attribute.push(getRequired());\n    content_view.required = true;\n  }\n  if (default_value_ !== \"\" && !default_value_ && default_value_ !== null) {\n    var def = \"defaultsTo: \";\n    if (content_view.type == \"text\") {\n      def += '\"' + default_value_ + '\"';\n    } else {\n      def += default_value_;\n    }\n    attribute.push(def);\n  }\n\n  var result = {\n    model_content: attrib.toLowerCase() + \": {\" + attribute.join(',') + \"}\",\n    view_content: JSON.stringify(content_view)\n  };\n  return result;\n};\n\nfunction getPK() {\n  return \"primaryKey: true\";\n}\n\nfunction getRequired() {\n  return \"required: true\";\n}\n\nfunction getUnique() {\n  return \"unique: true\";\n}\n\nfunction getString(Type) {\n  var out = [];\n  var attr_aux = Type.toLowerCase().split(/[(*)]/);\n  out.push('type: \"string\"');\n  if (attr_aux[1]) {\n    out.push(\"size: \" + parseInt(attr_aux[1]));\n  }\n  return quitComma(out.join(\",\"));\n}\n\nfunction getInteger(Type) {\n  var out = [];\n  var attr_aux = Type.toLowerCase().split(/[(*)]/);\n  out.push('type: \"integer\"');\n  if (attr_aux[1]) {\n    out.push(\"size: \" + parseInt(attr_aux[1]));\n  }\n  return quitComma(out.join(\",\"));\n}\n\nfunction getFloat() {\n  return 'type: \"float\"';\n}\n\nfunction getBoolean() {\n  return 'type: \"binary\"';\n}\n\nfunction getText() {\n  return 'type: \"text\"';\n}\n\nfunction getDate() {\n  return 'type: \"date\"';\n}\n\nfunction getDateTime() {\n  return 'type: \"datetime\"';\n}\n\n// TODO: Mejorar la detección de items con una expresion regular\nfunction getEnum(Type) {\n  var out = [];\n  var pa1 = Type.indexOf('(');\n  var pa2 = Type.indexOf(')');\n\n  pa1++;\n  var line = Type.substring(pa1, pa2).replace(\",\", \"\").split('\\'');\n  //console.log(pa1 + \", \" + pa2);\n  line.map((item) => {\n    if (item !== \"\") {\n      out.push('\"' + item + '\"');\n    }\n  });\n  //out.push(\"required: true\");\n  return \"enum: [\" + quitComma(out.join(\",\")) + \"]\";\n}\n\nfunction quitComma(str) {\n  if (str.trim().endsWith(\",\")) {\n    return str.trim().substr(0, str.length - 1);\n  }\n  return str;\n}\n\nexports.quitComma = quitComma;\n","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/configs/to.js":"/**\n * to.js\n * @autor Julian David (@anlijudavid)\n * @version 1.0.0\n * 2016\n */\nvar to = require('../configs/to');\n\n/**\n * [toModel simple json to model sails]\n * @param  {[type]} model_basic [description]\n * @return {[string]}             [string]\n */\nexports.toModel = function (model_basic) {\n  var out = [];\n  out.push(\"/**\");\n  out.push(\"\\tGenerated by sails-inverse-model\");\n  out.push(\"\\tDate:\" + (new Date()).toString());\n  out.push(\"*/\\n\");\n  out.push(\"module.exports = {\");\n  //console.log(model_basic);\n  out.push(model_basic);\n  out.push(\"};\");\n  return out.join(\"\\n\");\n};\n\nexports.saveController = function(name) {\n  var name_cap = exports.capitalize(name);\n  return [\n    \"/**\",\n    \"* \" + name_cap,\n    \"*\",\n    \"* @description :: Server-side logic for managing \" + name_cap,\n    \"* @help        :: See http://sailsjs.org/#!/documentation/concepts/Controllers\",\n    \"*/\",\n    \"module.exports = {\",\n    \"\t\tindex: function(req, res, next) {\",\n    \"\t\t\t\" + name_cap + \".find().exec(function(err, list) {\",\n    \"\t  \t\tif (err) return Error('Error');\",\n    \"\t\t  \t\treturn res.view({\",\n    \"\t\t\t\t\t\tresult: list\",\n    \"\t\t\t\t\t});\",\n    \"\t\t\t\t});\",\n    \"\t\t\t},\",\n    \"\",\n    \"\t\tshow: function(req, res, next) {\",\n    \"\t\t\t\" + name_cap + \".findOneById(req.param('id'), function Founded(err, value) {\",\n    \"\t\t\t\tif (err) {\",\n    \"\t\t\t\t\treturn next(err);\",\n    \"\t\t\t\t}\",\n    \"\t\t\t\tres.view({\",\n    \"\t\t\t\t\telement: value\",\n    \"\t\t\t\t});\",\n    \"\t\t\t});\",\n    \"\t\t},\",\n    \"\",\n    \"\t\tedit: function(req, res, next) {\",\n    \"\t\t\t\" + name_cap + \".findOne(req.param('id'), function Founded(err, value) {\",\n    \"\t\t\t\tif (err) {\",\n    \"\t\t\t\t\treturn next(err);\",\n    \"\t\t\t\t}\",\n    \"\t\t\t\tres.view({\",\n    \"\t\t\t\t\telement: value\",\n    \"\t\t\t\t});\",\n    \"\t\t\t});\",\n    \"\t\t},\",\n    \"\",\n    \"\t\tupdate: function(req, res, next) {\",\n    \"\t  \t\" + name_cap + \".update(req.param('id'), req.body, function Update(err, value) {\",\n    \"\t\t\t\tif(err) {\",\n    \"\t\t\t\t\treturn next(err);\",\n    \"\t\t\t\t}\",\n    \"\t\t\t\treturn res.redirect('\" + name + \"/show/' + req.param('id'));\",\n    \"\t\t\t});\",\n    \"\t\t},\",\n    \"\",\n    \"\t\tdelete: function(req, res, next) {\",\n    \"\t\t\t\" + name_cap + \".destroy(req.param('id'), function Update(err, value) {\",\n    \"\t\t\t\tif (err) {\",\n    \"\t\t\t\t\treturn next(err);\",\n    \"\t\t\t\t}\",\n    \"\t\t\t\treturn res.redirect('/\" + name + \"');\",\n    \"\t\t\t});\",\n    \"\t\t},\",\n    \"\",\n    \"};\"\n  ].join(\"\\n\");\n};\n\nexports.capitalize = function(word) {\n  return word.replace(/(^|\\s)([a-z])/g, function(m, p1, p2) {\n    return p1 + p2.toUpperCase();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/genviews/view.js":"var gencode = require('gencode');\nvar ansi = require('ansi-styles');\nvar mkdir = require(\"mkdir-promise\");\nvar ProgressBar = require('progress');\n\nrequire('./crud');\nrequire('../configs/route');\nrequire('../configs/color');\n\nvar author =  \"sails-inverse-model\";\n\nexports.generate = function(Models, folder_views) {\n  mkdir(folder_views).then(() => {\n    var bar3 = new ProgressBar(':bar', {\n      total: Models.length\n    });\n\n    Models.forEach(model => {\n      var route = concat(folder_views, model.model_name);\n      \n      mkdir(route).then(() => {\n        create(model.model_name, author, model).then((html) => {\n          //console.log(html);\n          gencode.save(html, route, \"create.ejs\").then((value) => {\n            //console.log(value);\n          }, (err) => {\n            console.log([ansi.red.open, \"ERROR\", err, ansi.red.close].join(\"\\n\"));\n          });\n        });\n\n        edit(model.model_name, author, model).then((html) => {\n          gencode.save(html, route, \"edit.ejs\").then((value) => {\n            //console.log(value);\n          }, (err) => {\n            console.log([ansi.red.open, \"ERROR\", err, ansi.red.close].join(\"\\n\"));\n          });\n        });\n\n        index(model.model_name, author, model).then((html) => {\n          gencode.save(html, route, \"index.ejs\").then((value) => {\n            //console.log(value);\n          }, (err) => {\n            console.log([ansi.red.open, \"ERROR\", err, ansi.red.close].join(\"\\n\"));\n          });\n        });\n\n        show(model.model_name, author, model).then((html) => {\n          gencode.save(html, route, \"show.ejs\").then((value) => {\n            //console.log(value);\n          }, (err) => {\n            console.log([ansi.red.open, \"ERROR\", err, ansi.red.close].join(\"\\n\"));\n          });\n        });\n      });\n\n      bar3.tick();\n      if (bar3.complete) {\n        console.log('Views ' + color(\"[OK]\", \"green\"));\n      }\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/genviews/crud.js":"var Handlebars = require('handlebars');\nvar components = require('./components');\n\n//Generic function\nfunction op(title, author, model) {\n  return new Promise(function (resolve, reject) {\n    var data_create = {\n      title: title,\n      author: author,\n      name: model.model_name,\n      elements: []\n    };\n\n    model\n      .view_content\n      .map((item) => {\n        var element = JSON.parse(item);\n        //element => '{\"required\":true,\"name\":\"descripcion\",\"type\":\"text\"}',\n        data_create\n          .elements\n          .push(element)\n      });\n\n    return resolve(data_create);\n  });\n};\n\n//Create \"create\" html from handlebars\ncreate = function (title, author, model) {\n  return new Promise(function (resolve, reject) {\n    var data_create = {\n      title: title,\n      author: author,\n      name: model.model_name,\n      elements: []\n    };\n\n    model\n      .view_content\n      .map((item) => {\n        var element = JSON.parse(item);\n        // element => '{\"required\":true,\"name\":\"descripcion\",\"type\":\"text\"}',\n        data_create\n          .elements\n          .push(element)\n      });\n\n    components.create(function (hbs) {\n      var template = Handlebars.compile(hbs);\n      var html = template(data_create);\n      //console.log(html);\n      resolve(html);\n    });\n  });\n};\n\n//Create \"edit\" html from handlebars\nedit = function (title, author, model) {\n  return new Promise(function (resolve, reject) {\n    var data_create = {\n      title: title,\n      author: author,\n      name: model.model_name,\n      elements: []\n    };\n\n    model\n      .view_content\n      .map((item) => {\n        var element = JSON.parse(item);\n        //element => '{\"required\":true,\"name\":\"descripcion\",\"type\":\"text\"}',\n        data_create\n          .elements\n          .push(element)\n      });\n\n    components.edit(function (hbs) {\n      var template = Handlebars.compile(hbs);\n      var html = template(data_create);\n      //console.log(html);\n      resolve(html);\n    });\n  });\n};\n\n//Create \"index\" html from handlebars\nindex = function (title, author, model) {\n  return new Promise(function (resolve, reject) {\n    var data_list = {\n      title: title,\n      author: author,\n      name: model.model_name,\n      elements: []\n    };\n\n    model\n      .view_content\n      .map((item) => {\n        var element = JSON.parse(item);\n        //element => '{\"required\":true,\"name\":\"descripcion\",\"type\":\"text\"}',\n        data_list\n          .elements\n          .push(element)\n      });\n\n    components.index(function (hbs) {\n      var template = Handlebars.compile(hbs);\n      var html = template(data_list);\n      //console.log(html);\n      resolve(html);\n    });\n  });\n};\n\n//Create \"show\" html from handlebars\nshow = function (title, author, model) {\n  return new Promise(function (resolve, reject) {\n    var data_list = {\n      title: title,\n      author: author,\n      name: model.model_name,\n      elements: []\n    };\n\n    model\n      .view_content\n      .map((item) => {\n        var element = JSON.parse(item);\n        //element => '{\"required\":true,\"name\":\"descripcion\",\"type\":\"text\"}',\n        data_list\n          .elements\n          .push(element)\n      });\n\n    components.show(function (hbs) {\n      var template = Handlebars.compile(hbs);\n      var html = template(data_list);\n      //console.log(html);\n      resolve(html);\n    });\n  });\n};\n\n/*\nEXAMPLE:\n{\n  model_name: 'tareasNoRealizadas',\n  content: 'attributes: { id_tarea: {type: \\'integer\\',required: true}, descripcion: {type: \\'string\\',required: true}, fecha_registro: {type: \\'datetime\\',required: true}, fecha_realizado: {type: \\'datetime\\',required: true}, realizado: {type: \\'boolean\\',required: true}, fk_persona_empleado: {type: \\'integer\\',required: true}, categoria: {type: \\'string\\',required: true} }',\n  view_content: ['{\"required\":true,\"name\":\"id_tarea\",\"type\":\"number\"}',\n    '{\"required\":true,\"name\":\"descripcion\",\"type\":\"text\"}',\n    '{\"required\":true,\"name\":\"fecha_registro\",\"type\":\"datetime\"}',\n    '{\"required\":true,\"name\":\"fecha_realizado\",\"type\":\"datetime\"}',\n    '{\"required\":true,\"name\":\"realizado\",\"type\":\"boolean\"}',\n    '{\"required\":true,\"name\":\"fk_persona_empleado\",\"type\":\"number\"}',\n    '{\"required\":true,\"name\":\"categoria\",\"type\":\"text\"}'\n  ]\n}\n*/","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/genviews/components.js":"var fs = require('fs');\nrequire('../configs/route');\n\n// content create.hbs\nexports.create = function (cb) {\n  return read(\"/crud/create.hbs\", function (content) {\n    cb(content);\n  });\n};\n\n// content index.hbs\nexports.index = function (cb) {\n  return read(\"/crud/index.hbs\", function (content) {\n    cb(content);\n  });\n};\n\n// content update.hbs\nexports.edit = function (cb) {\n  return read(\"/crud/edit.hbs\", function (content) {\n    cb(content);\n  });\n};\n\n// content show.hbs\nexports.show = function (cb) {\n  return read(\"/crud/show.hbs\", function (content) {\n    cb(content);\n  });\n};\n\n//Read file hbs and return code\nfunction read(name, cb) {\n  fs.readFile(concat(__dirname, name), 'utf8', (err, data) => {\n    if (err) \n      throw err;\n    cb(data.toString());\n  });\n}","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/configs/route.js":"// Concat text\nconcat = function (text1, text2) {\n  if (process.platform === 'win32') {\n    return text1.concat(\"\\\\\").concat(text2);\n  } else {\n    return text1.concat(\"/\").concat(text2);\n  }\n};","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/configs/color.js":"var ansi = require('ansi-styles');\n\n// Color text with ansi-styles\ncolor = function(text, color_) {\n  color_ = color_.toLowerCase();\n  if(color_ == \"white\") {\n    return ansi.white.open + (text) + ansi.white.close;\n  } else if (color_ == \"red\") {\n    return ansi.red.open + (text) + ansi.red.close;\n  } else if (color_ == \"green\") {\n    return ansi.green.open + (text) + ansi.green.close;\n  } else if (color_ == \"yellow\") {\n    return ansi.yellow.open + (text) + ansi.yellow.close;\n  } else if (color_ == \"blue\") {\n    return ansi.blue.open + (text) + ansi.blue.close;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/generator/save.js":"var ProgressBar = require('progress');\nvar to = require('../configs/to');\nrequire('../configs/color');\n\nvar gencode = require('gencode');\nvar mkdir = require(\"mkdir-promise\");\nvar s = require(\"underscore.string\");\n\nvar Beautifier = require('node-js-beautify');\nvar b = new Beautifier();\n\n/**\n * [save models in the folder Models]\n * @param  {[type]} dir_folder_controllers [path folder]\n * @param  {[type]} Models                 [array json]\n * @return {void}                        [none]\n */\nsaveControllers = function (dir_folder_controllers, Models) {\n\tvar bar2 = new ProgressBar(':bar', {\n\t\ttotal: Models.length\n\t});\n\n\tmkdir(dir_folder_controllers).then(() => {\n\t\tModels.map((model) => {\n\t\t\tvar name_c = to\n\t\t\t\t.capitalize(model.model_name)\n\t\t\t\t.trim()\n\t\t\t\t.concat(\"Controller.js\");\n\t\t\tgencode.save(b.beautify_js(to.saveController(s.camelize(model.model_name))), dir_folder_controllers, name_c).then((value) => {\n\t\t\t\tbar2.tick();\n\t\t\t\tif (bar2.complete) {\n\t\t\t\t\tconsole.log('Controllers ' + color(\"[OK]\", \"green\"));\n\t\t\t\t}\n\t\t\t}, (err) => {\n\t\t\t\tconsole.warn([ansi.red.open, \"ERROR\", err, ansi.red.close].join(\"\\n\"));\n\t\t\t});\n\t\t});\n\t}, (ex) => {\n\t\tconsole.error(ex);\n\t});\n};\n\n/**\n * [saveModels save models in the folder Models]\n * @param  {string} dir_folder_model [description]\n * @param  {array of models: {model_name & content}} Models           [Array of models postgres]\n */\nsaveModels = function (dir_folder_model, Models) {\n\tvar bar = new ProgressBar(':bar', {\n\t\ttotal: Models.length\n\t});\n\n\t//console.log(Models);\n\tmkdir(dir_folder_model).then(() => {\n\t\tModels.map((model) => {\n\t\t\t//console.log(model);\n\t\t\tvar name_m = to\n\t\t\t\t.capitalize(model.model_name)\n\t\t\t\t.trim() + \".js\";\n\t\t\tgencode.save(b.beautify_js(to.toModel(model.content)), dir_folder_model, name_m).then((value) => {\n\t\t\t\tbar.tick();\n\t\t\t\tif (bar.complete) {\n\t\t\t\t\tconsole.log('Models ' + color(\"[OK]\", \"green\"));\n\t\t\t\t}\n\t\t\t}, (err) => {\n\t\t\t\tconsole.error(color(err, \"red\"));\n\t\t\t});\n\t\t});\n\t}, (ex) => {\n\t\tconsole.error(ex);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/generator/postgres/compiler_pg.js":"/**\n * compiler_mysql.js\n * @autor Julian David (@anlijudavid)\n * 2016\n *\n * Process mysql to models waterline\n */\nvar ProgressBar = require('progress');\nvar s = require(\"underscore.string\");\n\nvar to = require('../../configs/to');\nvar view = require('../../genviews/view');\nrequire('../save');\n\nvar PostgresSchema = require('pg-json-schema-export');\n\nexports.generate = function(config, folder_models, folder_controllers, folder_views) {\n\tPostgresSchema.toJSON(config, config.schema)\n\t\t.then(function(schemas) {\n\t\t\t//console.log(JSON.stringify(schemas, null, 4));\n\t\t\tvar Models = [];\n\n\t\t\t//Tables\n\t\t\tfor (var table in schemas.tables) {\n\t\t\t\t//console.log(\"Table: \", table);\n\n\t\t\t\tif (schemas.tables.hasOwnProperty(table)) { //confirm data of tables\n\t\t\t\t\tvar attrs = schemas.tables[table][\"columns\"];\n\t\t\t\t\t//console.log(attrs);\n\t\t\t\t\tvar attributes_sails = [], view_contents = [];\n\t\t\t\t\tfor (var attr in attrs) { // attributes of a table\n\t\t\t\t\t\tif (attrs.hasOwnProperty(attr)) { // attr => name of attribute\n\t\t\t\t\t\t\t//console.log(\"\\n------>>\", properties_attribute);\n\t\t\t\t\t\t\tvar result = transpile(attrs[attr]);\n\t\t\t\t\t\t\tattributes_sails.push(result.model_content);\n\t\t\t\t\t\t\tview_contents.push(result.view_content);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//console.log(view_content);\n\t\t\t\t\tModels.push({\n\t\t\t\t\t\tmodel_name:s.camelize(table).trim(),\n\t\t\t\t\t\tcontent: \"attributes: { \" + (attributes_sails.join(\", \")) + \" }\",\n\t\t\t\t\t\tview_content: view_contents\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*for (var constraint in schemas.constraints) {\n\t\t\t\tconsole.log(JSON.stringify(constraint));\n\t\t\t}*/\n\n\t\t\tconsole.log([Models.length, \"tables\"].join(\" \"));\n\t\t\t//console.log(JSON.stringify(Models, null, 4));\n\n\t\t\tif (folder_models !== \"\" && folder_models) {\n\t\t\t\tsaveModels(folder_models, Models);\n\t\t\t}\n\t\t\tif (folder_controllers !== \"\" && folder_controllers) {\n\t\t\t\tsaveControllers(folder_controllers, Models);\n\t\t\t}\n\t\t\tif (folder_views !== \"\" && folder_views) {\n\t\t\t\tview.generate(Models, folder_views);\n\t\t\t}\n\t\t})\n\t\t.catch(function(error) {\n\t\t\tconsole.log(error);\n\t\t\t// handle error\n\t\t});\n};\n\n/**\n * [transpile: convert all attributes postgres to sailsjs]\n * @param  {[type]} attributes     [description]\n * @return {[type]}                [description]\n */\nfunction transpile(attributes) {\n\tvar type_ = attributes[\"data_type\"];\n\tvar column_name_ = attributes[\"column_name\"];\n\tvar default_value_ = attributes[\"column_default\"];\n\tvar is_nullable_ = attributes[\"is_nullable\"];\n\n\t//console.log(JSON.stringify(attributes));\n\treturn toSailsAttribute(type_, column_name_, default_value_, is_nullable_);\n}\n\n/**\n * [toSailsAttribute convert a attribute postgres to sailsjs]\n * @param  {string}  type_          [type object: varying, bigint...]\n * @param  {string}  attrib         [name of attribute: mail, id, pet...]\n * @param  {string}  default_value_ [value for default: if boolean --> default: false | true]\n * @param  {Boolean} is_nullable_   [required?]\n * @return {string}                 [result; attribute sailsjs]\n */\nfunction toSailsAttribute(type_, attrib, default_value_, is_nullable_) {\n\tvar sails_attribute_children = [];\n\tvar content_view = {\n\t\trequired: (is_nullable_ == \"true\" || is_nullable_ === true),\n\t\tdefault_value: undefined,\n\t\tname: attrib,\n\t\ttype: undefined\n\t};\n\n\t//console.log(attrib);\n\tif (type_.toLowerCase().indexOf('varying') > -1 ||\n\t\ttype_.toLowerCase().indexOf('character') > -1) {\n\t\tsails_attribute_children.push(\"type: 'string'\");\n\t\tcontent_view.type = \"text\";\n\t} else if (type_.toLowerCase().indexOf('int') > -1 ||\n\t\ttype_.toLowerCase().indexOf('small') > -1) { //Include smallint\n\t\tsails_attribute_children.push(\"type: 'integer'\");\n\t\tcontent_view.type = \"number\";\n\t} else if (type_.toLowerCase().indexOf('bool') > -1 ||\n\t\ttype_.toLowerCase().indexOf('bit') > -1) {\n\t\tsails_attribute_children.push(\"type: 'boolean'\");\n\t\tcontent_view.type = \"checkbox\";\n\t} else if (type_.toLowerCase().indexOf('float') > -1 ||\n\t\ttype_.toLowerCase().indexOf('dec') > -1 || //Include decimal\n\t\ttype_.toLowerCase().indexOf('numeric') > -1 ||\n\t\ttype_.toLowerCase().indexOf('real') > -1 ||\n\t\ttype_.toLowerCase().indexOf('precision') > -1) {\n\t\tsails_attribute_children.push('type: \"float\"');\n\t\tcontent_view.type = \"number\";\n\t} else if (type_.toLowerCase().indexOf('enum') > -1) {\n\t\t//sails_attribute_children.push(getEnum(type_));\n\t} else if (type_.toLowerCase().indexOf('datetime') > -1 ||\n\t\ttype_.toLowerCase().indexOf('timestamp') > -1) {\n\t\tsails_attribute_children.push(\"type: 'datetime'\");\n\t\tcontent_view.type = \"datetime\";\n\t} else if (type_.toLowerCase().indexOf('date') > -1) {\n\t\tsails_attribute_children.push(\"type: 'date'\");\n\t\tcontent_view.type = \"date\";\n\t} else if (type_.toLowerCase().indexOf('json') > -1) {\n\t\tsails_attribute_children.push('type: \"json\"');\n\t\tcontent_view.type = \"textarea\";\n\t} else if (type_.toLowerCase().indexOf('text') > -1) {\n\t\tsails_attribute_children.push(\"type: 'text'\");\n\t} else if (type_.toLowerCase().indexOf('bigint') > -1) { //Include smallint\n\t\tsails_attribute_children.push([\n\t\t\t\"type: 'integer',\",\n\t\t\t'size: 20'\n\t\t].join(\" \"));\n\t\tcontent_view.type = \"number\";\n\t}\n\n\tif (default_value_ !== \"\" && default_value_ !== null) {\n\t\tdefault_value_ = default_value_ + \"\";\n\t\tif (!default_value_.startsWith(\"nextval\")) { //No contains nextval\n\t\t\tsails_attribute_children.push(\"default: \" + default_value_);\n\t\t\tcontent_view.default_value = default_value_;\n\t\t}\n\t}\n\n\tif (is_nullable_ == \"true\" || is_nullable_ === true) {\n\t\tsails_attribute_children.push(\"required: \" + true);\n\t} else {\n\t\tsails_attribute_children.push(\"required: \" + false);\n\t}\n\n\t//console.log(\"=>=>=>=>>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>>=>=>=>\");\n\t//console.log(JSON.stringify(content_view));\n\n\tvar result = {\n\t\tmodel_content: (attrib.toLowerCase() + \": {\" + sails_attribute_children.join(',') + \"}\"),\n\t\tview_content: JSON.stringify(content_view)\n\t};\n\n\t//console.log(\"==>\",result.model_content);\n\treturn result;\n}\n\n// TODO: Detect \nfunction foreignkeys(constraints) {\n\n}\n","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/generator/mongodb/compiler_mongo.js":"/**\n * compiler_mongo.js\n * @autor Julian David (@anlijudavid)\n * 2016\n *\n * Mysql to models waterline\n */\n\nvar mondongo = require('mondongo');\nvar s = require(\"underscore.string\");\n\nvar view = require('../../genviews/view');\n\n// Connection URL var url = 'mongodb://localhost:27017/blog_db';\n\nexports.generate = function (host, port, database, folder_views, folder_models, folder_controllers) {\n  return new Promise(function (resolve, reject) {\n    exports\n      .generateModels(host, port, database)\n      .then((Models) => {\n        console.log([\n          Models.length, Models.length > 0\n            ? \"tables\"\n            : 'table'\n        ].join(\" \"));\n\n        //console.log(JSON.stringify(Models, null, 4));\n        if (folder_models !== \"\" && folder_models) {\n          saveModels(folder_models, Models);\n        }\n        if (folder_controllers !== \"\" && folder_controllers) {\n          saveControllers(folder_controllers, Models);\n        }\n        if (folder_views !== \"\" && folder_views) {\n          view.generate(Models, folder_views);\n        }\n      }, (err) => {\n        console.log(err);\n        return reject(err);\n      });\n  });\n};\n\nexports.generateModels = function (host, port, database) {\n  return new Promise(function (resolve, reject) {\n    createURL(host, port, database, function (err, connection_url) {\n      if (err) \n        return reject(err);\n      \n      var Models = [];\n      mondongo\n        .describe(connection_url)\n        .then((described) => {\n          described.forEach(elem => {\n            if (elem.collection !== 'system.indexes' && elem.count > 0) {\n              var attributes_sails = [],\n                view_contents = [];\n              elem\n                .describe\n                .forEach(item_descr => {\n                  var result = toSailsAttribute(item_descr.type, item_descr.key, item_descr.isID);\n                  attributes_sails.push(result.model_content);\n                  view_contents.push(result.view_content);\n                });\n\n              Models.push({\n                model_name: s.camelize(elem.collection),\n                content: \"attributes: { \" + (attributes_sails.join(\", \")) + \" }\",\n                view_content: view_contents\n              });\n            }\n          });\n          return resolve(Models);\n        });\n    });\n  });\n};\n\nfunction createURL(host, port, database, cb) {\n  if (host && port && database) {\n    return cb(null, 'mongodb://' + host + ':' + port + '/' + database + '');\n  } else {\n    var ms = [];\n    if (!host) {\n      ms.push(\"host\");\n    }\n    if (!port) {\n      ms.push(\"port\");\n    }\n    if (!database) {\n      ms.push(\"database\");\n    }\n    return cb(\"Missing parameters: \" + ms.join(\", \"), null);\n  }\n}\n\nfunction toSailsAttribute(type, name_attribute, isid) {\n  type = type\n    .toLowerCase()\n    .trim();\n\n  var sails_attribute = [];\n  var content_view = {\n    required: false,\n    default_value: undefined,\n    name: name_attribute,\n    type: undefined\n  };\n\n  if (type == \"object\") {\n    content_view.required = true;\n    if (isid && isid === true) {\n      content_view.type = \"number\";\n      sails_attribute.push(\"type: 'integer'\");\n    } else {\n      content_view.type = \"text\";\n      sails_attribute.push(\"type: 'text'\");\n    }\n  } else {\n    content_view.type = type;\n    sails_attribute.push(\"type: '\" + type + \"'\");\n  }\n\n  var result = {\n    model_content: (name_attribute.toLowerCase() + \": {\" + sails_attribute.join(',') + \"}\"),\n    view_content: JSON.stringify(content_view)\n  };\n\n  return result;\n}\n\n/*\nMondongo:\n\nthis.generate('localhost', 27017, 'blog_db').then((Models) => {\n  console.log(\"Output:\\n\", JSON.stringify(Models, null, 2));\n}, (error) => {\n  console.log(error);\n});\n*/\n","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/cli.js":"#!/usr/bin/env node\n\n'use strict';\n\nvar meow = require('meow');\nvar ansi = require('ansi-styles');\nvar assert = require('assert');\n\nrequire('./configs/color');\nrequire('./configs/route');\nrequire('./generator/save');\n\nvar convert = require('./configs/toHtmlAttribute');\n\nvar generate_my_transpile = require('./generator/mysql/compiler_sqlfile_mysql');\nvar generate_my = require('./generator/mysql/compiler_mysql');\nvar generate_pg = require('./generator/postgres/compiler_pg');\nvar generate_mg = require('./generator/mongodb/compiler_mongo');\nvar generate_view = require('./genviews/view');\n\nvar exitsfile = require('is-existing-file');\nvar message = require('./configs/message');\nvar constants = require('./configs/constants');\n\nvar cli = meow(message.show);\n\nvar g = cli.flags.g || cli.flags.generate;\n\nif (g) {\n  /**\n\t * Generator manual\n\t * Input standar\n\t */\n  var name = cli.flags.n || cli.flags.name; // Name model, controller and view\n\n  var Model = [];           // ArrayList of models\n  var option = (g === true) // Option default\n    ? 'all'                 // Option Controller, Views & Models\n    : g;                    // Select by user\n\n  var attributes = cli.flags.attributes || cli.flags.a; // Attributes\n\n  var split_attr = attributes.split(' ');\n  // console.log(\"attributes: \", JSON.stringify(split_attr, null, 3));\n\n  let aux_item_model = []; // Item Model\n  let aux_item_view = [];  // Item View\n\n  // Example: [xyz:string, abc:number]\n  split_attr.map((item) => {\n    let separate = item.split(':');\n\n    paramSearchFill(separate, function (result) {\n      // console.log('=>',result);\n\n      var _aux_item = separate[0] + \": { type: '\" + separate[1] + \"', \";\n      aux_item_model.push(_aux_item + result + \"}\");\n\n      var content_view = {\n        required: result.indexOf(constants.REQUIRED) !== -1, // Index string required for view input <input type=\"any\" required=\"true | false\">\n        default_value: 0,\n        name: separate[0],\n        type: convert.SailstoHtmlAtt(separate[1])\n      };\n\n      aux_item_view.push(JSON.stringify(content_view));\n    });\n  });\n\n  Model.push({\n    model_name: name || 'Name'.concat(parseInt(Math.random(20) * 100)), // Name file model, controller, and folder view\n    content: \"attributes: { \" + aux_item_model + \" }\",\n    view_content: aux_item_view\n  });\n\n  // console.log('Attri: => ', JSON.stringify(Model, null, 4));\n\n  switch (option) {\n    case 'view':\n      generate_view.generate(Model, concat(process.cwd(), 'Views'));\n      break;\n    case 'model':\n      saveModels(concat(process.cwd(), 'Models'), Model);\n      break;\n    case 'controller':\n      saveControllers(concat(process.cwd(), 'Controllers'), Model);\n      break;\n    case 'all':\n      saveModels(concat(process.cwd(), 'Models'), Model);\n      saveControllers(concat(process.cwd(), 'Controllers'), Model);\n      generate_view.generate(Model, concat(process.cwd(), 'Views'));\n      break;\n  }\n} else {\n  /**\n\t * Generator automatic\n\t * Databases\n\t */\n  var user,               // Option user database\n    pass,                 // Option password database\n    db,                   // Option name database\n    host,                 // Option host database\n    port,                 // Option port database\n    folder_models,        // Option path folder models \n    folder_controllers,   // Option path folder controllers\n    folder_views,         // Option path folder views\n    schema,               // Option schema database => postgres\n    type,                 // Option type gestor database: mysql, postgres, mongodb\n    filesql;              // Option path file .sql\n\n  //User\n  user = cli.flags.u || cli.flags.user;\n  if (user == true || user == \"true\") {\n    user = undefined; // Method concat: see configs/route.js\n  }\n\n  //Password\n  var pass = (cli.flags.p || cli.flags.pass);\n  if (pass === true) {\n    pass = undefined;\n    console.warn(\"Missing password database\");\n    process.exit(1);    \n  } else if (pass) {\n    pass = pass.toString();\n  }\n\n  //Database\n  db = cli.flags.d || cli.flags.database;\n\n  //Host\n  host = cli.flags.h || cli.flags.host || \"localhost\";\n  if (host === true) {\n    host = undefined;\n  } else if (host) {\n    host = host.toString();\n  }\n\n  //Type gestor database mysql | postgres | mongo\n  type = cli.flags.t || cli.flags.type || \"mysql\"; // Default Mysql\n  console.log(\">>\", type);\n  if (type === true || type == \"true\") {\n    type = \"mysql\";\n  }\n\n  //Schema database postgres\n  schema = cli.flags.s || cli.flags.schema || \"public\"; // Default public\n  if (schema === true || schema == \"true\") {\n    schema = \"public\";\n  }\n\n  //Folder models\n  folder_models = cli.flags.m || cli.flags.models;\n  if (folder_models === true || folder_models == \"true\") {\n    folder_models = concat(process.cwd(), \"models\"); // Method concat: see configs/route.js\n  }\n\n  //Folder Controllers\n  folder_controllers = cli.flags.c || cli.flags.controllers;\n  if (folder_controllers === true || folder_controllers == \"true\") {\n    folder_controllers = concat(process.cwd(), \"controllers\"); // Method concat: see configs/route.js\n  }\n\n  //Folder views\n  folder_views = cli.flags.v || cli.flags.views;\n  if (folder_views === true || folder_views == \"true\") {\n    folder_views = concat(process.cwd(), \"views\"); // Method concat: see configs/route.js\n  }\n\n  //file .sql\n  filesql = cli.flags.f || cli.flags.file;\n  if (filesql === true || filesql == \"true\") {\n    filesql = undefined; // Method concat: see configs/route.js\n  }\n\n  // Mysql, postgres & mongo connect config.\n  var config = {\n    user: user,\n    password: pass,\n    host: host,\n    database: db,\n    schema: schema,\n    port: 3306\n  };\n\n  info(); // Show message info\n  if (filesql) {\n    exitsfile(filesql, function (exits) {\n      if (exits) {\n        generate_my_transpile.generate(filesql, folder_models, folder_controllers, folder_views);\n      } else {\n        console.log(color(\"\\nERROR: No exits '\" + filesql + \"'. \\nEnter 'sails-inverse-model --help'\", \"red\"));\n      }\n    });\n  } else {\n    if (db && host) {\n      type = type.toLowerCase(); //pg, postgres, mysql\n\n      if (type.indexOf(\"pg\") != -1 || type.indexOf(\"postgres\") != -1) { //pg, postgres\n        config.port = 5432;\n        generate_pg.generate(config, folder_models, folder_controllers, folder_views);\n      } else if (type.indexOf(\"my\") != -1 || type.indexOf(\"mysql\") != -1) { //my, mysql\n        delete config.schema;\n        generate_my.generate(config, folder_models, folder_controllers, folder_views);\n      } else if (type.indexOf(\"mg\") != -1 || type.indexOf(\"mongo\") != -1) {\n        //mg, mongo\n        generate_mg\n          .generate(config.host, 27017, config.database, folder_views, folder_models, folder_controllers)\n          .then((value) => {\n            console.log(color(\"[OK]\", \"green\") + \" Mongo\");\n          }, (err) => {\n            console.log(\"Error\");\n            console.error(color(err, \"red\"));\n          });\n      }\n    } else {\n      console.log(color(\"Missing parameters: enter 'sails-inverse-model --help'\", \"red\"));\n    }\n  }\n}\n\n/**\n * Menu info console\n */\nfunction info() {\n  console.log(\"User       :\", color(user || \"Not used\", \"green\"));\n  console.log(\"Password   :\", color(pass || \"Not used\", \"green\"));\n  console.log(\"Database   :\", color(db || \"Not used\", \"green\"));\n  console.log(\"Host       :\", color(host || \"Not used\", \"green\"));\n  console.log(\"Models     :\", color((folder_models || \"Not generate\"), \"green\"));\n  console.log(\"Views      :\", color((folder_views || \"Not generate\"), \"green\"));\n  console.log(\"Controllers:\", color((folder_controllers || \"Not generate\"), \"green\"));\n  console.log(\"DB         :\", color((type), \"green\"));\n  console.log(\"Schema (pg):\", color((schema), \"green\"));\n}\n\n/**\n * Search params\n *\n * @param {array} params\n * @param {function} cb\n * @returns string\n */\nfunction paramSearchFill(params, cb) {\n  var output = '';\n\n  for (var i = 2; i < params.length; i++) {\n    var element = params[i];\n\n    if (element == 'r' || element == 'required') {\n      output += constants.REQUIRED;\n    } else if (element == 'u' || element == 'unique') {\n      output += constants.UNIQUE;\n    } else if (element == 'a' || element == 'autoincrement') {\n      output += constants.AUTOINC;\n    } else if (element == 'k' || element == 'primarykey') {\n      output += constants.PRIMARYKEY;\n    }\n  }\n\n  if (output.endsWith(',')) {\n    output = output.substring(0, output.length - 1);\n  }\n\n  return cb(output);\n}\n","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/configs/toHtmlAttribute.js":"exports.SailstoHtmlAtt = function (type_data) {\n  switch (type_data) {\n    case 'text':\n    case 'string':\n    case 'mediumtext':\n    case 'longtext':\n    case 'array':\n    case 'json':\n      return 'text';\n    case 'float':\n    case 'integer':\n    case 'objectid':\n      return 'number';\n    case 'boolean':\n    case 'binary':\n      return 'checkbox';\n    default:\n      return type_data;\n  }\n}","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/generator/mysql/compiler_sqlfile_mysql.js":"var scanner = require('../../scanners/scanner_mysql');\nvar compiler_mysql = require('./compiler_mysql');\nvar view = require('../../genviews/view');\nvar to = require('../../configs/to');\nvar s = require(\"underscore.string\");\nrequire('../save');\n\nexports.generate = function(pathsql, folder_models, folder_controllers, folder_views) {\n\tthis.createModels(pathsql, function(err, Models) {\n\t\t//console.log(JSON.stringify(Models, null, 2));\n\t\tif (folder_views !== \"\" && folder_views) {\n\t\t\tview.generate(Models, folder_views);\n\t\t}\n\t\tif (folder_models !== \"\" && folder_models) {\n\t\t\tsaveModels(folder_models, Models);\n\t\t}\n\t\tif (folder_controllers !== \"\" && folder_controllers) {\n\t\t\tsaveControllers(folder_controllers, Models);\n\t\t}\n\t});\n};\n\nexports.createModels = function(pathsql, cb) {\n\tscanner.generate(pathsql, function(err, described) {\n\t\tif (err) {\n\t\t\tcb(err, null);\n\t\t} else {\n\t\t\tvar Models = [];\n\t\t\tdescribed.map((table, i) => {\n\t\t\t\t//console.log(table);\n\t\t\t\tvar attributes_sails = [],\n\t\t\t\t\tview_contents = [];\n\t\t\t\ttable.atr.map((attr) => {\n\t\t\t\t\tvar transp = transpile(attr);\n\t\t\t\t\tattributes_sails.push(transp.model_content);\n\t\t\t\t\tview_contents.push(transp.view_content);\n\t\t\t\t});\n\n\t\t\t\tModels.push({\n\t\t\t\t\tmodel_name: s.camelize(table.table_name),\n\t\t\t\t\tcontent: \"attributes: { \" + (attributes_sails.join(\", \")) + \" }\",\n\t\t\t\t\tview_content: view_contents\n\t\t\t\t});\n\t\t\t});\n\t\t\tcb(null, Models);\n\t\t}\n\t});\n};\n\nfunction transpile(attributes) {\n\t//console.log(\"attributes \" + JSON.stringify(attributes, null, 4));\n\tvar type_ = attributes[\"Type\"];\n\tvar is_nullable_ = attributes[\"NotNull\"];\n\tvar size_ = attributes[\"Size\"];\n\tvar ai_ = attributes[\"AI\"];\n\tvar name_ = attributes[\"Name\"];\n\n\t//console.log(JSON.stringify(attributes));\n\treturn compiler_mysql.toSailsAttribute(type_, name_, null, is_nullable_);\n}\n\n/*\n{\n   \"table_name\": \"tipo_notificacion\",\n   \"atr\": [\n     {\n       \"Name\": \"tntf_idtiponotif\",\n       \"Type\": \"int\",\n       \"Size\": \"11\",\n       \"NotNull\": true,\n       \"AI\": true\n     },\n     {\n       \"Name\": \"tntf_nombre\",\n       \"Type\": \"varchar\",\n       \"Size\": \"45\",\n       \"NotNull\": true,\n       \"AI\": false\n     },\n     {\n       \"Name\": \"tntf_descripcion\",\n       \"Type\": \"text\",\n       \"Size\": \"\",\n       \"NotNull\": true,\n       \"AI\": false\n     }\n   ]\n },\n ...\n*/\n","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/scanners/scanner_mysql.js":"var gencode = require('gencode');\nvar data = require('./data.json');\n\nexports.generate = function (pathsql, cb) {\n  gencode\n    .utils\n    .toArray(pathsql, 'utf8', '\\n')\n    .then((value) => { //Too: \\n, \\t, -, etc.\n      var allData = \"\";\n      var tables = [],\n        dataValid = [];\n      value.map((item) => {\n        item = item\n          .toString()\n          .trim()\n          .toLowerCase();\n\n        if (!isComment(item)) {\n          allData += item;\n        }\n      });\n      var splits = allData.split(\";\");\n      for (var i = 0; i < splits.length; i++) {\n        if (isValid(splits[i])) {\n          dataValid.push(splits[i]);\n        }\n      }\n\n      for (var i = 0; i < dataValid.length; i++) {\n        if (dataValid[i].toString().toLowerCase().trim().startsWith('create table')) {\n          tables.push(verifyContains(dataValid[i].toString()));\n        }\n      }\n      getTablesJSON(tables, function (err, result) {\n        //console.log(\":>\", JSON.stringify(result, null, 2));\n        cb(err, result);\n      });\n\n    }, (error) => {\n      cb(error, null);\n      //console.log(\"ERROR=>\", error);\n    });\n};\n\n//exports.generate(\"../test/script.sql\");\n\nfunction verifyContains(item) {\n  var result = \"\";\n  var state = true;\n  var start,\n    end = 0;\n  var add;\n  for (var i = 0; i < data.contains.length; i++) {\n    result = \"\";\n    state = true;\n    while (state) {\n      start = item.indexOf(data.contains[i]);\n      if (start != -1) {\n        end = item\n          .substring(start, item.length)\n          .indexOf(\")\") + start;\n        result += item.substring(0, start);\n        add = item.substring(start, end);\n        while (add.indexOf(\",\") != -1) {\n          add = add.replace(\",\", \"-\");\n        }\n        result += add;\n        item = item.substring(end, item.length);\n      } else {\n        state = false;\n      }\n    }\n    result += item;\n    item = result;\n  }\n  return result;\n}\n\nfunction cleanItem(item) {\n  var line = item;\n  for (var i = 0; i < data.start.length; i++) {\n    if (item.startsWith(data.start[i])) {\n      line = item.substring(data.start[i].length + 1, item.length);\n      break;\n    }\n  }\n  return line;\n}\n\nfunction getTableName(item) {\n  var firstLine = item.indexOf('(');\n  var name = item\n    .substring(0, firstLine)\n    .trim()\n    .replace('`', '')\n    .replace('`', '');\n  return name;\n}\n\nfunction isAtribute(line) {\n  for (var j = 0; j < data.attr.length; j++) {\n    if (line.toString().trim().startsWith(data.attr[j])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getAtributes(item) {\n  var attrLines = item.indexOf('(');\n  item = item.substring(attrLines + 1, item.length);\n  var atributes = [];\n  var lines = item.split(',');\n  var split;\n  for (var i = 0; i < lines.length; i++) {\n    lines[i] = lines[i].replace(\"not null\", \"not_null\");\n    if (isAtribute(lines[i])) {\n\n      split = lines[i] != \"\"\n        ? lines[i].split(\" \")\n        : \"\";\n      atributes.push({\n        Name: getValue(0, split),\n        Type: getValue(1, split),\n        Size: getValue(2, split),\n        NotNull: split.length > 2,\n        AI: split.length > 3\n      });\n    }\n  }\n  return atributes;\n}\n\nfunction getValue(pos, values) {\n  var result = \"\";\n\n  switch (pos) {\n    case 0:\n      result = values[pos]\n        .replace('`', '')\n        .replace('`', '');\n      break;\n    case 1:\n      var val = values[pos];\n      if (!val.startsWith(\"enum\")) {\n        var start = val.indexOf(\"(\");\n        result = start == -1\n          ? val\n          : val.substring(0, start);\n      } else {\n        result = val;\n      }\n      break;\n    case 2:\n      var val = values[1];\n      if (!val.startsWith(\"enum\")) {\n        var start = val.indexOf(\"(\");\n        result = start == -1\n          ? \"\"\n          : val.substring(start + 1, val.indexOf(\")\"));\n      } else {\n        result = \"\";\n      }\n      break;\n    default:\n  }\n  return result;\n}\n\nfunction getTablesJSON(tables, cb) {\n  var tablesJSON = [];\n  var item,\n    line;\n  for (var i = 0; i < tables.length; i++) {\n    item = tables[i]\n      .toString()\n      .toLowerCase();\n    tables[i] = cleanItem(item);\n\n    tablesJSON.push({\n      table_name: getTableName(tables[i]),\n      atr: getAtributes(tables[i])\n    });\n  }\n  console.log(\"d: \" + tablesJSON.length);\n  //console.log(JSON.stringify(tablesJSON, null, 4));\n  cb(null, tablesJSON);\n}\n\nfunction isComment(line) {\n  return line\n    .trim()\n    .startsWith('--');\n}\n\nfunction isValid(line) {\n  if (line !== \"\") {\n    for (var i = 0; i < data.ignore.length; i++) {\n      if (line.startsWith(data.ignore[i])) {\n        return false;\n      }\n    }\n  } else {\n    return false;\n  }\n  return true;\n}","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/configs/message.js":"require('./color');\n\nexports.show = [\n  color(\"                .-..-.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      \", \"blue\"),\n  \"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\",\n  color(\"Sails\", \"yellow\") + color(\"-inverse\", \"blue\") + color(\"-model\", \"red\") + color(\"<|    .-..-.\t\" + require('../package.json').version, \"green\"),\n  color(\"                    |\\\t\t\t\t\t\t\t\t\t\t\", \"green\"),\n  color(\"    ~    ~   ~     /|.\\ \t\t\t\t\t\t\t\t\t\", \"green\"),\n  color(\"       ~  ~       / || \\\t\t\t\t\t\t\t\t\t\", \"green\"),\n  color(\"         ~  ~   ,'  |'  \\\t\t\t\t\t\t\t\t\t\", \"green\"),\n  color(\"             .-'.-==|/_--'\t\t\t\t\t\t\t\t\", \"green\"),\n  color(\"             `--'-------' \t\t\t\t\t\t\t\t\", \"green\"),\n  color(\"   _--__--_---__---___--__---__--___      \", \"blue\"),\n  color(\" __---__--__---___--__---___--_-_---___    \", \"blue\"),\n  \" ----------------------------------------------------------\",\n  \" :: \" + (new Date()).toString(),\n  \" ----------------------------------------------------------\",\n  'Example:',\n  '  $ mkdir sails-output',\n  '  $ cd sails-output',\n  '  $ sails-inverse-model -u postgres -p root -d almacen -t pg -m -v -c',\n  '',\n  'User         : postgres',\n  'Password     : root',\n  'Database     : almacen',\n  'Host         : localhost',\n  'Models       : /home/julian/Documents/sails-output/models',\n  'Views        : /home/julian/Documents/sails-output/views',\n  'Controllers  : /home/julian/Documents/sails-output/controllers',\n  'DB           : pg',\n  'Schema (pg)  : public',\n  '=====================================',\n  'Views [OK]',\n  '=====================================',\n  'Models [OK]',\n  '=====================================',\n  'Controllers [OK]',\n  '',\n  '    Note: Copy models      => your/project_sails/api',\n  '          Copy controllers => your/project_sails/api',\n  '          Copy views/*     => your/project_sails/views/',\n  ' Then: ',\n  ' $ cd your/project_sails/',\n  ' $ sails lift',\n  '',\n  ' More info: https://github.com/juliandavidmr/sails-inverse-model',\n  \" ---------------------------------------------------------------\",\n  'Options:',\n  ' -u, --user        User of database',\n  ' -p, --pass        Password of database',\n  ' -d, --database    Database name',\n  ' -h, --host        Host server               Default: localhost',\n  ' -m, --models      Folder output models      Default: Folder actual',\n  ' -c, --controllers Folder output controllers Default: Folder actual',\n  ' -v, --views       Folder output views       Default: Folder actual ' + color('(Experimental)', 'yellow'),\n  ' -t, --type        Type gestor database: mysql|postgres|mongodb  Default: mysql',\n  ' -s, --schema      (Only PostgreSQL) Schema database postgres: Default: public',\n  ' -f, --file        (Only MySQL) .sql file path entry' + color(' (Experimental)', 'yellow'),\n  '\\n',\n  '====================== Individual generation ==================',\n  'You can quickly generate a model, a controller, a view or these three at the sam' +\n      'e time.',\n  '# Generate model',\n  '$ sails-inverse-model -g model --name Pet -a \"name:string:r:u owner:string\"',\n  '',\n  '# Generate Controller',\n  '$ sails-inverse-model -g controller --name Pet -a \"name:string:r:u owner:string\"',\n  '',\n  '# Generate View',\n  '$ sails-inverse-model -g view --name Pet -a \"name:string:r owner:string\"',\n  '',\n  '# Generate all (Model, View and Controller)',\n  '$ sails-inverse-model -g all --name Pet -a \"name:string:r:k owner:string\"',\n  '',\n  'Where:',\n  '--------------------------------------------',\n  '|Param | Description   |     Example       |',\n  '|------|--------------|-------------------|',\n  '|   r  | Required      | catname:string:r  |',\n  '|   u  | Unique        | catname:string:u  |',\n  '|   a  | Autoincrement | index:integer:a   |',\n  '|   k  | Primary Key   | index:integer:k   |',\n  '--------------------------------------------',\n  'You can also set all three parameters at the same time, for example: index:integer:a:u:r'\n];","/home/travis/build/npmtest/node-npmtest-sails-inverse-model/node_modules/sails-inverse-model/configs/constants.js":"exports.REQUIRED = 'required: true,';\nexports.UNIQUE = 'unique: true,';\nexports.AUTOINC = 'autoincrement: true,';\nexports.PRIMARYKEY = 'primaryKey: true,';"}